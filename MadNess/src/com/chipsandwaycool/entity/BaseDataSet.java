package com.chipsandwaycool.entity;

import com.chipsandwaycool.entity.player.PlayerManager;
import com.chipsandwaycool.entity.player.Player;
import com.chipsandwaycool.entity.team.TeamManager;
import com.chipsandwaycool.entity.team.Team;
import com.chipsandwaycool.entity.game.GameManager;
import com.chipsandwaycool.entity.game.Game;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;

/**
 * This little baby will (re)initialize the data store (Derby) and create
 * a base data set, replacing any data in its way.  It is not intended as
 * part of the normal runtime.
 * <br/><br/>
 * The MadnessDatabase must be initialized before using this class, since
 * that is used to get a database connection.
 */
public class BaseDataSet extends Object
  {

  /**
   * Create or recreate any base data needed.
   */
  public void createBaseData() throws SQLException
    {
    Connection connection = null;
    try
      {
      connection = MadnessDatabase.GetInstance().getConnection();
      createPlayers(connection);
      createTeams(connection);
      createPicks(connection);
      createGames(connection);
      }
    finally
      {
      if (connection != null)
        try { connection.close(); }
        catch (SQLException ignored) { }
      }
    }


  private void createPlayers(Connection connection) throws SQLException
    {
    dropTable(connection, "Player");
    String ddl = "create table Player ("
          + "\n  id int generated by default as identity,"
          + "\n  username varchar(30),"
          + "\n  active smallint,"
          + "\n  password varchar(30),"
          + "\n  firstName varchar(20),"
          + "\n  lastName varchar(30),"
          + "\n  nickname varchar(30),"
          + "\n  email varchar(100),"
          + "\n  admin smallint,"
          + "\n  constraint playerPK primary key (id))";
    connection.createStatement().execute(ddl);
    PlayerManager playerMan = PlayerManager.GetInstance();
    playerMan.insert(new Player("admin", true, "password", "Ralph", "McAdmin", "Root", "ralph@admin.com", true));
    playerMan.insert(new Player("player1", true, "one", "Tom", "Tallboy", "Tipsy", null, false));
    playerMan.insert(new Player("player2", true, "two", "Harvy", "Hoser", "Half-Pint", null, false));
    playerMan.insert(new Player("player3", true, "three", "Sharon", "Scheize", "Scheize Buyin'", null, false));
    playerMan.insert(new Player("player4", true, "four", "Frank", "Falendown", "Faced", null, false));
    playerMan.insert(new Player("player5", false, "five", "Stacy", "Souser", "Slurpy", null, false));
    }


  private void createTeams(Connection connection) throws SQLException
    {
    dropTable(connection, "Team");
    String ddl = "create table Team ("
          + "\n  id int generated by default as identity,"
          + "\n  rank int,"
          + "\n  home varchar(100),"
          + "\n  name varchar(100),"
          + "\n  constraint teamPK primary key (id))";
    connection.createStatement().execute(ddl);
    String[] names = {
          "Boston College", "Eagles",
          "Clemson", "Tigers",
          "Duke", "Blue Devils",
          "Florida", "State Seminoles",
          "Georgia Tech", "Yellow Jackets",
          "Maryland", "Terrapins",
          "Miami", "Hurricanes",
          "North Carolina", "Tar Heels",
          "North Carolina State", "Wolfpack",
          "Virginia", "Cavaliers",
          "Virginia Tech", "Hokies",
          "Wake Forest", "Demon Deacons",
          "Cincinnati", "Bearcats",
          "Connecticut", "Huskies",
          "DePaul", "Blue Demons",
          "Georgetown", "Hoyas",
          "Louisville", "Cardinals",
          "Marquette", "Golden Eagles",
          "Notre Dame", "Fighting Irish",
          "Pittsburgh", "Panthers",
          "Providence", "Friars",
          "Rutgers", "Scarlet Knights",
          "Seton Hall", "Pirates",
          "South Florida", "Bulls",
          "St. John's", "Red Storm",
          "Syracuse", "Orangemen",
          "Villanova", "Wildcats",
          "West Virginia", "Mountaineers",
          "Baylor", "Bears",
          "Colorado", "Buffaloes",
          "Iowa State", "Cyclones",
          "Kansas State", "Wildcats",
          "Missouri", "Tigers",
          "Nebraska", "Cornhuskers",
          "Oklahoma", "Sooners",
          "Oklahoma State", "Cowboys",
          "Texas", "Longhorns",
          "Texas A&M", "Aggies",
          "Texas Tech", "Red Raiders",
          "Illinois", "Fighting Illini",
          "Indiana", "Hoosiers",
          "Iowa", "Hawkeyes",
          "Michigan", "Wolverines",
          "Michigan State", "Spartans",
          "Minnesota", "Golden Gophers",
          "Northwestern", "Wildcats",
          "Ohio State", "Buckeyes",
          "Purdue", "Boilermakers",
          "Penn State", "Nittany Lions",
          "Wisconsin", "Badgers",
          "Arizona", "Wildcats",
          "Arizona State", "Sun Devils",
          "California", "Golden Bears",
          "Oregon", "Ducks",
          "Oregon State", "Beavers",
          "Stanford", "Cardinal",
          "UCLA", "Bruins",
          "USC", "Trojans",
          "Washington", "Huskies",
          "Washington State", "Cougars",
          "Alabama", "Crimson Tide",
          "Arkansas", "Razorbacks",
          "Auburn", "Tigers",
          "Florida", "Gators" };
    TeamManager teamMan = TeamManager.GetInstance();
    for (int i = 0; i < (names.length >> 1); i++)
      teamMan.insert(new Team(i, names[i * 2], names[i * 2 + 1]));
    }


  private void createPicks(Connection connection) throws SQLException
    {
    dropTable(connection, "Pick");
    String ddl = "create table Pick ("
          + "\n  playerID int,"
          + "\n  points int,"
          + "\n  teamID int,"
          + "\n  constraint pickPK primary key (playerID, points))";
    connection.createStatement().execute(ddl);
    }


  private void createGames(Connection connection) throws SQLException
    {
    dropTable(connection, "Game");
    String ddl = "create table Game ("
          + "\n  id int generated by default as identity,"
          + "\n  round int,"
          + "\n  position int,"
          + "\n  team1ID int,"
          + "\n  team2ID int,"
          + "\n  winningTeamID int,"
          + "\n  constraint gamekPK primary key (id))";
    connection.createStatement().execute(ddl);
    GameManager gameMan = GameManager.GetInstance();
    int[] rankPositionMap = { 1, 16, 8, 9, 5, 12, 4, 13, 6, 11, 3, 14, 7, 10, 2, 15 };
    for (int round = 0; round < 6; round++)
      for (int position = 0; position < (32 >> round); position++)
        {
        Game game = new Game(round, position, -1, -1, -1);
        if (round == 0)
          {
          game.setTeam1ID(((position & 24) << 1) + rankPositionMap[(position & 7) << 1]);
          game.setTeam2ID(((position & 24) << 1) + rankPositionMap[((position & 7) << 1) + 1]);
          }
        gameMan.insert(game);
        }
    }


  /**
   * Drop a table, and don't mind if it wasn't there already.
   *
   * @param connection a database connection to use
   * @param tableName the name of the table to be dropped
   */
  private void dropTable(Connection connection, String tableName)
    {
    try
      {
      Statement statement = connection.createStatement();
      statement.executeUpdate("drop table " + tableName);
      statement.close();
      }
    catch (SQLException exception)
      {
      if (exception.getMessage().indexOf("does not exist") == -1)
        exception.printStackTrace();
      }
    }

  }
